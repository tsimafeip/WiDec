#!/usr/bin/env python
import optparse
import sys

from timeit import default_timer as timer

import models
from helper import monotone_decoding_translate

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="../../data/input",
                     help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="../../data/tm",
                     help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="../../data/lm",
                     help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int",
                     help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int",
                     help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,
                     help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]


global_start = timer()
sys.stderr.write("Decoding %s...\n" % (opts.input,))
# The following code implements a monotone decoding
# algorithm (one that doesn't permute the target phrases).
# Hence, all hypotheses in stacks[i] represent translations of
# the first i words of the input sentence. You should generalize
# this so that they can represent translations of *any* i words.
for f in french:
    monotone_decoding_translate(f, lm, tm, opts.s, opts.verbose)

global_end = timer()
sys.stderr.write("\nCalculated in : %f seconds\n" % (global_end-global_start))