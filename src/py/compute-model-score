#!/usr/bin/env python
import optparse
import os.path
import sys
import models

from timeit import default_timer as timer

from helper import bitmap, maybe_write, score_lm, generate_all_alignments, calculate_chart_over_alignments

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="../../data/input",
                     help="File containing sentences to translate (default=data/input)")
optparser.add_option("-o", "--output", dest="output", default="translations",
                     help="File containing translated sentences (default=translations)")
optparser.add_option("-t", "--translation-model", dest="tm", default="../../data/tm",
                     help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="../../data/lm",
                     help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-v", "--verbosity", dest="verbosity", default=1, type="int",
                     help="Verbosity level, 0-3 (default=1)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, sys.maxsize)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()]
english_source = open(opts.output).readlines() if os.path.isfile(opts.output) else sys.stdin

# we stop reading english file on empty line, since we store some metainfo in the end of file
english = []
for line in english_source:
    if not line.strip():
        break
    english.append(tuple(line.strip().split()))

# tm should translate unknown words as-is with probability 1
for word in set(sum(french, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

maybe_write("Aligning...\n", 0, opts.verbosity)
maybe_write("NOTE: TM logprobs may be positive since they do not include segmentation\n", 0, opts.verbosity)
total_logprob = 0.0
unaligned_sentences = 0
start = timer()
for sent_num, (f, e) in enumerate(zip(french, english)):
    maybe_write("===========================================================\n", 1, opts.verbosity)
    maybe_write("SENTENCE PAIR:\n%s\n%s\n" % (" ".join(f), " ".join(e)), 0, opts.verbosity)

    maybe_write("\nLANGUAGE MODEL SCORES:\n", 1, opts.verbosity)
    lm_logprob = score_lm(e, lm, opts.verbosity)
    maybe_write("TOTAL LM LOGPROB: %f\n" % lm_logprob, 0, opts.verbosity)
    total_logprob += lm_logprob

    maybe_write("\nALL POSSIBLE PHRASE-TO-PHRASE ALIGNMENTS:\n", 1, opts.verbosity)
    alignments = generate_all_alignments(f=f, e=e, tm=tm, configured_verbosity=opts.verbosity)

    # Compute sum of probability of all possible alignments by dynamic programming.
    # To do this, recursively compute the sum over all possible alignments for
    # each pair of English prefix (indexed by ei) and French coverage (indexed by bitmap v),
    # working upwards from the base case (ei=0, v=0) [i.e. forward chaining].
    # The final sum is the one obtained for the pair (ei=len(e), v=range(len(f))
    maybe_write("\nDYNAMIC PROGRAMMING SUM OVER ALIGNMENTS\n", 2, opts.verbosity)
    chart = calculate_chart_over_alignments(e=e, f=f, alignments=alignments, configured_verbosity=opts.verbosity)

    goal = bitmap(range(len(f)))
    if goal in chart[len(e)]:
        maybe_write("\nTOTAL TM LOGPROB: %f\n" % chart[len(e)][goal], 0, opts.verbosity)
        total_logprob += chart[len(e)][goal]
    else:
        sys.stdout.write("ERROR: COULD NOT ALIGN SENTENCE %d\n" % sent_num)
        unaligned_sentences += 1
    maybe_write("\n\n", 2, opts.verbosity)

end = timer()
sys.stdout.write("\nTotal corpus log probability (LM+TM): %f\n" % total_logprob)
sys.stdout.write("\nCalculated in : %f seconds\n" % (end - start))
if len(french) != len(english):
    sys.stdout.write("ERROR: French and English files are not the same length! Only complete output can be graded!\n")
if unaligned_sentences > 0:
    sys.stdout.write(
        "ERROR: There were %d unaligned sentences! Only sentences that align under the model can be graded!\n" % unaligned_sentences)
if len(french) != len(english) or unaligned_sentences > 0:
    sys.exit(1)  # signal problem to caller
