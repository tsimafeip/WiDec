#!/usr/bin/env python
import sys
import optparse

from timeit import default_timer as timer

import models
from helper import beam_decoding

'''
Algorithm

1. Find all possible translations from TM for all possible phrases.
 Each translation phrase can be a start, the goal is to cover all input words.
2. Introduce reordering penalty to estimation process.
3. Model beam search with optimizations.

'''

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="../../data/input",
                     help="File containing sentences to translate (default=../../data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="../../data/tm",
                     help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="../../data/lm",
                     help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int",
                     help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=10, type="int",
                     help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=10000, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-a", "--alpha-threshold", dest="alpha", default=0.0, type="float",
                     help="Value of alpha threshold for stack pruning: "
                          "only prob(h) >= alpha * prob(best_h) should be kept in the stack."
                          "By default, we disable threshold pruning (alpha = 0.0).")
optparser.add_option("-d", "--reordering-limit", dest="reordering_limit", default=sys.maxsize,
                     type="int",
                     help="Reordering limit to restrict maximum possible reordering distance. "
                          "By default, it is disabled - any reordering distance is considered.")
optparser.add_option("-b", "--reordering-base", dest="b", default=0.75,
                     type="float",
                     help="Base for the distance-function in (0; 1) range. "
                          "Default value 0.75 is based on estimate provided by Koehn SMT book (Figure 6.7).")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,
                     help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

if not (0 <= opts.alpha <= 1):
    raise Exception(
        f'Cannot run decoding with alpha (stack threshold ratio) with value not in [0, 1] range: {opts.alpha}.')

if not (0 < opts.b < 1):
    raise Exception(f'Cannot run decoding with reordering penalty with value outside of (0, 1) range: {opts.b}')

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

start = timer()
for f in french:
    beam_decoding(f=f, lm=lm, tm=tm, stack_size=opts.s, stack_threshold_alpha=opts.alpha,
                  reordering_limit=opts.reordering_limit, reordering_base=opts.b, verbose=opts.verbose)

end = timer()
sys.stdout.write("\nCalculated in : %f seconds\n" % (end - start))
